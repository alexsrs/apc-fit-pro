const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugDeleteGroup() {
  try {
    console.log('üîç === DEBUG EXCLUS√ÉO DE GRUPO ===');
    
    // IDs do erro
    const userId = 'cmbpudp780000v07cqw1p7esm';
    const groupId = 'fee35673-9c8c-40f0-aa62-bb232bd36674';
    
    console.log(`üìã Testando exclus√£o:`);
    console.log(`   userId: ${userId}`);
    console.log(`   groupId: ${groupId}`);
    
    // 1. Verificar se o usu√°rio existe
    console.log('\n1Ô∏è‚É£ Verificando usu√°rio...');
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });
    console.log(`   Usu√°rio encontrado: ${user ? user.name : 'N√ÉO ENCONTRADO'}`);
    
    // 2. Verificar perfil do usu√°rio
    console.log('\n2Ô∏è‚É£ Verificando perfil do usu√°rio...');
    const userPerfil = await prisma.userPerfil.findFirst({
      where: { userId: userId }
    });
    console.log(`   Perfil encontrado: ${userPerfil ? `${userPerfil.role} (ID: ${userPerfil.id})` : 'N√ÉO ENCONTRADO'}`);
    
    // 3. Verificar se o grupo existe
    console.log('\n3Ô∏è‚É£ Verificando grupo...');
    const grupo = await prisma.grupo.findUnique({
      where: { id: groupId },
      include: {
        membros: true,
        criadoPor: {
          include: {
            user: true
          }
        }
      }
    });
    
    if (grupo) {
      console.log(`   Grupo encontrado: ${grupo.nome}`);
      console.log(`   Criado por ID: ${grupo.criadoPorId}`);
      console.log(`   Membros: ${grupo.membros.length}`);
      console.log(`   Criador: ${grupo.criadoPor ? grupo.criadoPor.user?.name : 'DESCONHECIDO'}`);
      
      // Listar membros
      if (grupo.membros.length > 0) {
        console.log(`   üë• Membros do grupo:`);
        for (const membro of grupo.membros) {
          console.log(`     - ${membro.id} (UserPerfil)`);
        }
      }
    } else {
      console.log(`   ‚ùå Grupo N√ÉO ENCONTRADO`);
    }
    
    // 4. Verificar se o perfil do usu√°rio criou o grupo
    if (userPerfil && grupo) {
      console.log('\n4Ô∏è‚É£ Verificando permiss√£o...');
      const permissao = grupo.criadoPorId === userPerfil.id;
      console.log(`   Perfil criou o grupo: ${permissao ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      console.log(`   Compara√ß√£o: ${grupo.criadoPorId} === ${userPerfil.id}`);
    }
    
    // 5. Tentar exclus√£o REAL
    console.log('\n5Ô∏è‚É£ Executando exclus√£o...');
    if (userPerfil && grupo && grupo.criadoPorId === userPerfil.id) {
      console.log('   üóëÔ∏è EXECUTANDO EXCLUS√ÉO...');
      
      try {
        // Simular a mesma l√≥gica do repository
        const result = await prisma.$transaction(async (tx) => {
          console.log(`   üîÑ Removendo ${grupo.membros.length} membros do grupo`);
          
          // 1. Remover todos os membros do grupo
          await tx.grupo.update({
            where: { id: groupId },
            data: {
              membros: {
                set: [] 
              }
            }
          });

          // 2. Deletar o grupo
          const grupoExcluido = await tx.grupo.delete({
            where: { id: groupId }
          });

          console.log(`   ‚úÖ Grupo ${groupId} exclu√≠do com sucesso`);
          return grupoExcluido;
        });
        
        console.log('   ‚úÖ Exclus√£o realizada com sucesso:', result.nome);
      } catch (deleteError) {
        console.error('   ‚ùå Erro na exclus√£o:', deleteError);
      }
    } else {
      console.log('   ‚ùå Exclus√£o seria NEGADA');
      if (!userPerfil) console.log('     - Perfil n√£o encontrado');
      if (!grupo) console.log('     - Grupo n√£o encontrado');
      if (userPerfil && grupo && grupo.criadoPorId !== userPerfil.id) {
        console.log('     - Usu√°rio n√£o √© o criador do grupo');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

debugDeleteGroup();
